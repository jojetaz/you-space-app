#!/usr/bin/env python3
"""
Script para forzar la actualizaci√≥n de la base de datos
"""

import sqlite3
import os

def forzar_actualizacion_db():
    """Fuerza la actualizaci√≥n de la base de datos"""
    
    db_path = 'ia_tools.db'
    
    if not os.path.exists(db_path):
        print("‚ùå No se encontr√≥ la base de datos")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üîÑ Forzando actualizaci√≥n de la base de datos...")
        
        # Verificar y agregar columna imagen a categoria si no existe
        cursor.execute("PRAGMA table_info(categoria)")
        columnas = [col[1] for col in cursor.fetchall()]
        
        if 'imagen' not in columnas:
            print("‚ûï Agregando columna 'imagen' a tabla categoria...")
            cursor.execute("ALTER TABLE categoria ADD COLUMN imagen VARCHAR(200)")
            print("‚úÖ Columna 'imagen' agregada a categoria")
        else:
            print("‚ÑπÔ∏è  Columna 'imagen' ya existe en categoria")
        
        # Verificar y agregar columnas a herramienta
        cursor.execute("PRAGMA table_info(herramienta)")
        columnas_herramienta = [col[1] for col in cursor.fetchall()]
        
        if 'imagen' not in columnas_herramienta:
            print("‚ûï Agregando columna 'imagen' a tabla herramienta...")
            cursor.execute("ALTER TABLE herramienta ADD COLUMN imagen VARCHAR(200)")
            print("‚úÖ Columna 'imagen' agregada a herramienta")
        else:
            print("‚ÑπÔ∏è  Columna 'imagen' ya existe en herramienta")
        
        if 'video' not in columnas_herramienta:
            print("‚ûï Agregando columna 'video' a tabla herramienta...")
            cursor.execute("ALTER TABLE herramienta ADD COLUMN video VARCHAR(200)")
            print("‚úÖ Columna 'video' agregada a herramienta")
        else:
            print("‚ÑπÔ∏è  Columna 'video' ya existe en herramienta")
        
        # Verificar y agregar columna es_admin a usuario
        cursor.execute("PRAGMA table_info(usuario)")
        columnas_usuario = [col[1] for col in cursor.fetchall()]
        
        if 'es_admin' not in columnas_usuario:
            print("‚ûï Agregando columna 'es_admin' a tabla usuario...")
            cursor.execute("ALTER TABLE usuario ADD COLUMN es_admin BOOLEAN DEFAULT 0")
            print("‚úÖ Columna 'es_admin' agregada a usuario")
        else:
            print("‚ÑπÔ∏è  Columna 'es_admin' ya existe en usuario")
        
        # Actualizar registros existentes para asegurar compatibilidad
        print("üîÑ Actualizando registros existentes...")
        
        # Asegurar que todas las categor√≠as tengan el campo imagen
        cursor.execute("UPDATE categoria SET imagen = NULL WHERE imagen IS NULL")
        
        # Asegurar que todas las herramientas tengan los campos imagen y video
        cursor.execute("UPDATE herramienta SET imagen = NULL WHERE imagen IS NULL")
        cursor.execute("UPDATE herramienta SET video = NULL WHERE video IS NULL")
        
        # Asegurar que todos los usuarios tengan el campo es_admin
        cursor.execute("UPDATE usuario SET es_admin = 0 WHERE es_admin IS NULL")
        
        # Crear usuario administrador si no existe
        cursor.execute("SELECT COUNT(*) FROM usuario WHERE email = 'admin@example.com'")
        if cursor.fetchone()[0] == 0:
            print("‚ûï Creando usuario administrador...")
            from werkzeug.security import generate_password_hash
            admin_password = generate_password_hash('admin123')
            cursor.execute('''
                INSERT INTO usuario (email, password, nombre, es_admin)
                VALUES (?, ?, ?, ?)
            ''', ('admin@example.com', admin_password, 'Administrador', True))
            print("‚úÖ Usuario administrador creado")
        
        # Crear categor√≠as de ejemplo si no existen
        cursor.execute("SELECT COUNT(*) FROM categoria")
        if cursor.fetchone()[0] == 0:
            print("‚ûï Creando categor√≠as de ejemplo...")
            categorias_ejemplo = [
                ('Generaci√≥n de Video', 'Herramientas para crear y editar videos con IA'),
                ('Generaci√≥n de Im√°genes', 'Herramientas para crear im√°genes con inteligencia artificial'),
                ('Generaci√≥n de M√∫sica', 'Herramientas para crear m√∫sica con IA'),
                ('Presentaciones', 'Herramientas para crear presentaciones autom√°ticamente'),
                ('Edici√≥n de Video', 'Herramientas de edici√≥n de video asistida por IA'),
                ('Conversi√≥n de Formatos', 'Herramientas para convertir archivos entre formatos'),
                ('Automatizaci√≥n de Trabajos', 'Herramientas para automatizar tareas repetitivas'),
                ('Desarrollo Web', 'Herramientas para desarrollo web con IA'),
                ('Aplicaciones M√≥viles', 'Herramientas para desarrollo de apps m√≥viles')
            ]
            
            for nombre, descripcion in categorias_ejemplo:
                cursor.execute('''
                    INSERT INTO categoria (nombre, descripcion, imagen)
                    VALUES (?, ?, ?)
                ''', (nombre, descripcion, None))
            print(f"‚úÖ {len(categorias_ejemplo)} categor√≠as de ejemplo creadas")
        
        conn.commit()
        conn.close()
        
        print("\nüéâ Base de datos actualizada exitosamente!")
        print("\nüìã Informaci√≥n de acceso:")
        print("   Email: admin@example.com")
        print("   Contrase√±a: admin123")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error al actualizar la base de datos: {e}")
        return False

if __name__ == "__main__":
    print("üîÑ Forzando actualizaci√≥n de la base de datos...")
    forzar_actualizacion_db()
    print("\n‚úÖ Proceso completado.") 